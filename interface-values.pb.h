// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: interface-values.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_interface_2dvalues_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_interface_2dvalues_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_interface_2dvalues_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_interface_2dvalues_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_interface_2dvalues_2eproto;
namespace interfacevalues {
class DroneInfo;
struct DroneInfoDefaultTypeInternal;
extern DroneInfoDefaultTypeInternal _DroneInfo_default_instance_;
class DroneInfo_Location;
struct DroneInfo_LocationDefaultTypeInternal;
extern DroneInfo_LocationDefaultTypeInternal _DroneInfo_Location_default_instance_;
class DroneInfo_SearchArea;
struct DroneInfo_SearchAreaDefaultTypeInternal;
extern DroneInfo_SearchAreaDefaultTypeInternal _DroneInfo_SearchArea_default_instance_;
class MapInfo;
struct MapInfoDefaultTypeInternal;
extern MapInfoDefaultTypeInternal _MapInfo_default_instance_;
}  // namespace interfacevalues
PROTOBUF_NAMESPACE_OPEN
template<> ::interfacevalues::DroneInfo* Arena::CreateMaybeMessage<::interfacevalues::DroneInfo>(Arena*);
template<> ::interfacevalues::DroneInfo_Location* Arena::CreateMaybeMessage<::interfacevalues::DroneInfo_Location>(Arena*);
template<> ::interfacevalues::DroneInfo_SearchArea* Arena::CreateMaybeMessage<::interfacevalues::DroneInfo_SearchArea>(Arena*);
template<> ::interfacevalues::MapInfo* Arena::CreateMaybeMessage<::interfacevalues::MapInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace interfacevalues {

// ===================================================================

class DroneInfo_Location final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:interfacevalues.DroneInfo.Location) */ {
 public:
  inline DroneInfo_Location() : DroneInfo_Location(nullptr) {}
  ~DroneInfo_Location() override;
  explicit constexpr DroneInfo_Location(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DroneInfo_Location(const DroneInfo_Location& from);
  DroneInfo_Location(DroneInfo_Location&& from) noexcept
    : DroneInfo_Location() {
    *this = ::std::move(from);
  }

  inline DroneInfo_Location& operator=(const DroneInfo_Location& from) {
    CopyFrom(from);
    return *this;
  }
  inline DroneInfo_Location& operator=(DroneInfo_Location&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DroneInfo_Location& default_instance() {
    return *internal_default_instance();
  }
  static inline const DroneInfo_Location* internal_default_instance() {
    return reinterpret_cast<const DroneInfo_Location*>(
               &_DroneInfo_Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DroneInfo_Location& a, DroneInfo_Location& b) {
    a.Swap(&b);
  }
  inline void Swap(DroneInfo_Location* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DroneInfo_Location* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DroneInfo_Location* New() const final {
    return new DroneInfo_Location();
  }

  DroneInfo_Location* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DroneInfo_Location>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DroneInfo_Location& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DroneInfo_Location& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DroneInfo_Location* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "interfacevalues.DroneInfo.Location";
  }
  protected:
  explicit DroneInfo_Location(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXcoordFieldNumber = 1,
    kYcoordFieldNumber = 2,
  };
  // optional int32 xcoord = 1;
  bool has_xcoord() const;
  private:
  bool _internal_has_xcoord() const;
  public:
  void clear_xcoord();
  ::PROTOBUF_NAMESPACE_ID::int32 xcoord() const;
  void set_xcoord(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xcoord() const;
  void _internal_set_xcoord(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 ycoord = 2;
  bool has_ycoord() const;
  private:
  bool _internal_has_ycoord() const;
  public:
  void clear_ycoord();
  ::PROTOBUF_NAMESPACE_ID::int32 ycoord() const;
  void set_ycoord(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ycoord() const;
  void _internal_set_ycoord(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:interfacevalues.DroneInfo.Location)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 xcoord_;
  ::PROTOBUF_NAMESPACE_ID::int32 ycoord_;
  friend struct ::TableStruct_interface_2dvalues_2eproto;
};
// -------------------------------------------------------------------

class DroneInfo_SearchArea final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:interfacevalues.DroneInfo.SearchArea) */ {
 public:
  inline DroneInfo_SearchArea() : DroneInfo_SearchArea(nullptr) {}
  ~DroneInfo_SearchArea() override;
  explicit constexpr DroneInfo_SearchArea(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DroneInfo_SearchArea(const DroneInfo_SearchArea& from);
  DroneInfo_SearchArea(DroneInfo_SearchArea&& from) noexcept
    : DroneInfo_SearchArea() {
    *this = ::std::move(from);
  }

  inline DroneInfo_SearchArea& operator=(const DroneInfo_SearchArea& from) {
    CopyFrom(from);
    return *this;
  }
  inline DroneInfo_SearchArea& operator=(DroneInfo_SearchArea&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DroneInfo_SearchArea& default_instance() {
    return *internal_default_instance();
  }
  static inline const DroneInfo_SearchArea* internal_default_instance() {
    return reinterpret_cast<const DroneInfo_SearchArea*>(
               &_DroneInfo_SearchArea_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DroneInfo_SearchArea& a, DroneInfo_SearchArea& b) {
    a.Swap(&b);
  }
  inline void Swap(DroneInfo_SearchArea* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DroneInfo_SearchArea* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DroneInfo_SearchArea* New() const final {
    return new DroneInfo_SearchArea();
  }

  DroneInfo_SearchArea* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DroneInfo_SearchArea>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DroneInfo_SearchArea& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DroneInfo_SearchArea& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DroneInfo_SearchArea* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "interfacevalues.DroneInfo.SearchArea";
  }
  protected:
  explicit DroneInfo_SearchArea(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpperboundFieldNumber = 1,
    kLeftboundFieldNumber = 2,
    kLowerboundFieldNumber = 3,
    kRightboundFieldNumber = 4,
  };
  // optional int32 upperbound = 1;
  bool has_upperbound() const;
  private:
  bool _internal_has_upperbound() const;
  public:
  void clear_upperbound();
  ::PROTOBUF_NAMESPACE_ID::int32 upperbound() const;
  void set_upperbound(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_upperbound() const;
  void _internal_set_upperbound(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 leftbound = 2;
  bool has_leftbound() const;
  private:
  bool _internal_has_leftbound() const;
  public:
  void clear_leftbound();
  ::PROTOBUF_NAMESPACE_ID::int32 leftbound() const;
  void set_leftbound(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_leftbound() const;
  void _internal_set_leftbound(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 lowerbound = 3;
  bool has_lowerbound() const;
  private:
  bool _internal_has_lowerbound() const;
  public:
  void clear_lowerbound();
  ::PROTOBUF_NAMESPACE_ID::int32 lowerbound() const;
  void set_lowerbound(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lowerbound() const;
  void _internal_set_lowerbound(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 rightbound = 4;
  bool has_rightbound() const;
  private:
  bool _internal_has_rightbound() const;
  public:
  void clear_rightbound();
  ::PROTOBUF_NAMESPACE_ID::int32 rightbound() const;
  void set_rightbound(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rightbound() const;
  void _internal_set_rightbound(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:interfacevalues.DroneInfo.SearchArea)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 upperbound_;
  ::PROTOBUF_NAMESPACE_ID::int32 leftbound_;
  ::PROTOBUF_NAMESPACE_ID::int32 lowerbound_;
  ::PROTOBUF_NAMESPACE_ID::int32 rightbound_;
  friend struct ::TableStruct_interface_2dvalues_2eproto;
};
// -------------------------------------------------------------------

class DroneInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:interfacevalues.DroneInfo) */ {
 public:
  inline DroneInfo() : DroneInfo(nullptr) {}
  ~DroneInfo() override;
  explicit constexpr DroneInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DroneInfo(const DroneInfo& from);
  DroneInfo(DroneInfo&& from) noexcept
    : DroneInfo() {
    *this = ::std::move(from);
  }

  inline DroneInfo& operator=(const DroneInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DroneInfo& operator=(DroneInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DroneInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const DroneInfo* internal_default_instance() {
    return reinterpret_cast<const DroneInfo*>(
               &_DroneInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DroneInfo& a, DroneInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DroneInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DroneInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DroneInfo* New() const final {
    return new DroneInfo();
  }

  DroneInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DroneInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DroneInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DroneInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DroneInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "interfacevalues.DroneInfo";
  }
  protected:
  explicit DroneInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DroneInfo_Location Location;
  typedef DroneInfo_SearchArea SearchArea;

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 2,
    kSearchareaFieldNumber = 3,
    kNameFieldNumber = 1,
  };
  // repeated .interfacevalues.DroneInfo.Location location = 2;
  int location_size() const;
  private:
  int _internal_location_size() const;
  public:
  void clear_location();
  ::interfacevalues::DroneInfo_Location* mutable_location(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::interfacevalues::DroneInfo_Location >*
      mutable_location();
  private:
  const ::interfacevalues::DroneInfo_Location& _internal_location(int index) const;
  ::interfacevalues::DroneInfo_Location* _internal_add_location();
  public:
  const ::interfacevalues::DroneInfo_Location& location(int index) const;
  ::interfacevalues::DroneInfo_Location* add_location();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::interfacevalues::DroneInfo_Location >&
      location() const;

  // repeated .interfacevalues.DroneInfo.SearchArea searcharea = 3;
  int searcharea_size() const;
  private:
  int _internal_searcharea_size() const;
  public:
  void clear_searcharea();
  ::interfacevalues::DroneInfo_SearchArea* mutable_searcharea(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::interfacevalues::DroneInfo_SearchArea >*
      mutable_searcharea();
  private:
  const ::interfacevalues::DroneInfo_SearchArea& _internal_searcharea(int index) const;
  ::interfacevalues::DroneInfo_SearchArea* _internal_add_searcharea();
  public:
  const ::interfacevalues::DroneInfo_SearchArea& searcharea(int index) const;
  ::interfacevalues::DroneInfo_SearchArea* add_searcharea();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::interfacevalues::DroneInfo_SearchArea >&
      searcharea() const;

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:interfacevalues.DroneInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::interfacevalues::DroneInfo_Location > location_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::interfacevalues::DroneInfo_SearchArea > searcharea_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_interface_2dvalues_2eproto;
};
// -------------------------------------------------------------------

class MapInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:interfacevalues.MapInfo) */ {
 public:
  inline MapInfo() : MapInfo(nullptr) {}
  ~MapInfo() override;
  explicit constexpr MapInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MapInfo(const MapInfo& from);
  MapInfo(MapInfo&& from) noexcept
    : MapInfo() {
    *this = ::std::move(from);
  }

  inline MapInfo& operator=(const MapInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapInfo& operator=(MapInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MapInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const MapInfo* internal_default_instance() {
    return reinterpret_cast<const MapInfo*>(
               &_MapInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MapInfo& a, MapInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MapInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MapInfo* New() const final {
    return new MapInfo();
  }

  MapInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MapInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MapInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "interfacevalues.MapInfo";
  }
  protected:
  explicit MapInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDroneinfoFieldNumber = 1,
  };
  // repeated .interfacevalues.DroneInfo droneinfo = 1;
  int droneinfo_size() const;
  private:
  int _internal_droneinfo_size() const;
  public:
  void clear_droneinfo();
  ::interfacevalues::DroneInfo* mutable_droneinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::interfacevalues::DroneInfo >*
      mutable_droneinfo();
  private:
  const ::interfacevalues::DroneInfo& _internal_droneinfo(int index) const;
  ::interfacevalues::DroneInfo* _internal_add_droneinfo();
  public:
  const ::interfacevalues::DroneInfo& droneinfo(int index) const;
  ::interfacevalues::DroneInfo* add_droneinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::interfacevalues::DroneInfo >&
      droneinfo() const;

  // @@protoc_insertion_point(class_scope:interfacevalues.MapInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::interfacevalues::DroneInfo > droneinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2dvalues_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DroneInfo_Location

// optional int32 xcoord = 1;
inline bool DroneInfo_Location::_internal_has_xcoord() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DroneInfo_Location::has_xcoord() const {
  return _internal_has_xcoord();
}
inline void DroneInfo_Location::clear_xcoord() {
  xcoord_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DroneInfo_Location::_internal_xcoord() const {
  return xcoord_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DroneInfo_Location::xcoord() const {
  // @@protoc_insertion_point(field_get:interfacevalues.DroneInfo.Location.xcoord)
  return _internal_xcoord();
}
inline void DroneInfo_Location::_internal_set_xcoord(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  xcoord_ = value;
}
inline void DroneInfo_Location::set_xcoord(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xcoord(value);
  // @@protoc_insertion_point(field_set:interfacevalues.DroneInfo.Location.xcoord)
}

// optional int32 ycoord = 2;
inline bool DroneInfo_Location::_internal_has_ycoord() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DroneInfo_Location::has_ycoord() const {
  return _internal_has_ycoord();
}
inline void DroneInfo_Location::clear_ycoord() {
  ycoord_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DroneInfo_Location::_internal_ycoord() const {
  return ycoord_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DroneInfo_Location::ycoord() const {
  // @@protoc_insertion_point(field_get:interfacevalues.DroneInfo.Location.ycoord)
  return _internal_ycoord();
}
inline void DroneInfo_Location::_internal_set_ycoord(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  ycoord_ = value;
}
inline void DroneInfo_Location::set_ycoord(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ycoord(value);
  // @@protoc_insertion_point(field_set:interfacevalues.DroneInfo.Location.ycoord)
}

// -------------------------------------------------------------------

// DroneInfo_SearchArea

// optional int32 upperbound = 1;
inline bool DroneInfo_SearchArea::_internal_has_upperbound() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DroneInfo_SearchArea::has_upperbound() const {
  return _internal_has_upperbound();
}
inline void DroneInfo_SearchArea::clear_upperbound() {
  upperbound_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DroneInfo_SearchArea::_internal_upperbound() const {
  return upperbound_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DroneInfo_SearchArea::upperbound() const {
  // @@protoc_insertion_point(field_get:interfacevalues.DroneInfo.SearchArea.upperbound)
  return _internal_upperbound();
}
inline void DroneInfo_SearchArea::_internal_set_upperbound(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  upperbound_ = value;
}
inline void DroneInfo_SearchArea::set_upperbound(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_upperbound(value);
  // @@protoc_insertion_point(field_set:interfacevalues.DroneInfo.SearchArea.upperbound)
}

// optional int32 leftbound = 2;
inline bool DroneInfo_SearchArea::_internal_has_leftbound() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DroneInfo_SearchArea::has_leftbound() const {
  return _internal_has_leftbound();
}
inline void DroneInfo_SearchArea::clear_leftbound() {
  leftbound_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DroneInfo_SearchArea::_internal_leftbound() const {
  return leftbound_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DroneInfo_SearchArea::leftbound() const {
  // @@protoc_insertion_point(field_get:interfacevalues.DroneInfo.SearchArea.leftbound)
  return _internal_leftbound();
}
inline void DroneInfo_SearchArea::_internal_set_leftbound(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  leftbound_ = value;
}
inline void DroneInfo_SearchArea::set_leftbound(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_leftbound(value);
  // @@protoc_insertion_point(field_set:interfacevalues.DroneInfo.SearchArea.leftbound)
}

// optional int32 lowerbound = 3;
inline bool DroneInfo_SearchArea::_internal_has_lowerbound() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DroneInfo_SearchArea::has_lowerbound() const {
  return _internal_has_lowerbound();
}
inline void DroneInfo_SearchArea::clear_lowerbound() {
  lowerbound_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DroneInfo_SearchArea::_internal_lowerbound() const {
  return lowerbound_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DroneInfo_SearchArea::lowerbound() const {
  // @@protoc_insertion_point(field_get:interfacevalues.DroneInfo.SearchArea.lowerbound)
  return _internal_lowerbound();
}
inline void DroneInfo_SearchArea::_internal_set_lowerbound(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  lowerbound_ = value;
}
inline void DroneInfo_SearchArea::set_lowerbound(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lowerbound(value);
  // @@protoc_insertion_point(field_set:interfacevalues.DroneInfo.SearchArea.lowerbound)
}

// optional int32 rightbound = 4;
inline bool DroneInfo_SearchArea::_internal_has_rightbound() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DroneInfo_SearchArea::has_rightbound() const {
  return _internal_has_rightbound();
}
inline void DroneInfo_SearchArea::clear_rightbound() {
  rightbound_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DroneInfo_SearchArea::_internal_rightbound() const {
  return rightbound_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DroneInfo_SearchArea::rightbound() const {
  // @@protoc_insertion_point(field_get:interfacevalues.DroneInfo.SearchArea.rightbound)
  return _internal_rightbound();
}
inline void DroneInfo_SearchArea::_internal_set_rightbound(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  rightbound_ = value;
}
inline void DroneInfo_SearchArea::set_rightbound(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rightbound(value);
  // @@protoc_insertion_point(field_set:interfacevalues.DroneInfo.SearchArea.rightbound)
}

// -------------------------------------------------------------------

// DroneInfo

// optional string name = 1;
inline bool DroneInfo::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DroneInfo::has_name() const {
  return _internal_has_name();
}
inline void DroneInfo::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DroneInfo::name() const {
  // @@protoc_insertion_point(field_get:interfacevalues.DroneInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DroneInfo::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:interfacevalues.DroneInfo.name)
}
inline std::string* DroneInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:interfacevalues.DroneInfo.name)
  return _s;
}
inline const std::string& DroneInfo::_internal_name() const {
  return name_.Get();
}
inline void DroneInfo::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DroneInfo::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DroneInfo::release_name() {
  // @@protoc_insertion_point(field_release:interfacevalues.DroneInfo.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DroneInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:interfacevalues.DroneInfo.name)
}

// repeated .interfacevalues.DroneInfo.Location location = 2;
inline int DroneInfo::_internal_location_size() const {
  return location_.size();
}
inline int DroneInfo::location_size() const {
  return _internal_location_size();
}
inline void DroneInfo::clear_location() {
  location_.Clear();
}
inline ::interfacevalues::DroneInfo_Location* DroneInfo::mutable_location(int index) {
  // @@protoc_insertion_point(field_mutable:interfacevalues.DroneInfo.location)
  return location_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::interfacevalues::DroneInfo_Location >*
DroneInfo::mutable_location() {
  // @@protoc_insertion_point(field_mutable_list:interfacevalues.DroneInfo.location)
  return &location_;
}
inline const ::interfacevalues::DroneInfo_Location& DroneInfo::_internal_location(int index) const {
  return location_.Get(index);
}
inline const ::interfacevalues::DroneInfo_Location& DroneInfo::location(int index) const {
  // @@protoc_insertion_point(field_get:interfacevalues.DroneInfo.location)
  return _internal_location(index);
}
inline ::interfacevalues::DroneInfo_Location* DroneInfo::_internal_add_location() {
  return location_.Add();
}
inline ::interfacevalues::DroneInfo_Location* DroneInfo::add_location() {
  ::interfacevalues::DroneInfo_Location* _add = _internal_add_location();
  // @@protoc_insertion_point(field_add:interfacevalues.DroneInfo.location)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::interfacevalues::DroneInfo_Location >&
DroneInfo::location() const {
  // @@protoc_insertion_point(field_list:interfacevalues.DroneInfo.location)
  return location_;
}

// repeated .interfacevalues.DroneInfo.SearchArea searcharea = 3;
inline int DroneInfo::_internal_searcharea_size() const {
  return searcharea_.size();
}
inline int DroneInfo::searcharea_size() const {
  return _internal_searcharea_size();
}
inline void DroneInfo::clear_searcharea() {
  searcharea_.Clear();
}
inline ::interfacevalues::DroneInfo_SearchArea* DroneInfo::mutable_searcharea(int index) {
  // @@protoc_insertion_point(field_mutable:interfacevalues.DroneInfo.searcharea)
  return searcharea_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::interfacevalues::DroneInfo_SearchArea >*
DroneInfo::mutable_searcharea() {
  // @@protoc_insertion_point(field_mutable_list:interfacevalues.DroneInfo.searcharea)
  return &searcharea_;
}
inline const ::interfacevalues::DroneInfo_SearchArea& DroneInfo::_internal_searcharea(int index) const {
  return searcharea_.Get(index);
}
inline const ::interfacevalues::DroneInfo_SearchArea& DroneInfo::searcharea(int index) const {
  // @@protoc_insertion_point(field_get:interfacevalues.DroneInfo.searcharea)
  return _internal_searcharea(index);
}
inline ::interfacevalues::DroneInfo_SearchArea* DroneInfo::_internal_add_searcharea() {
  return searcharea_.Add();
}
inline ::interfacevalues::DroneInfo_SearchArea* DroneInfo::add_searcharea() {
  ::interfacevalues::DroneInfo_SearchArea* _add = _internal_add_searcharea();
  // @@protoc_insertion_point(field_add:interfacevalues.DroneInfo.searcharea)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::interfacevalues::DroneInfo_SearchArea >&
DroneInfo::searcharea() const {
  // @@protoc_insertion_point(field_list:interfacevalues.DroneInfo.searcharea)
  return searcharea_;
}

// -------------------------------------------------------------------

// MapInfo

// repeated .interfacevalues.DroneInfo droneinfo = 1;
inline int MapInfo::_internal_droneinfo_size() const {
  return droneinfo_.size();
}
inline int MapInfo::droneinfo_size() const {
  return _internal_droneinfo_size();
}
inline void MapInfo::clear_droneinfo() {
  droneinfo_.Clear();
}
inline ::interfacevalues::DroneInfo* MapInfo::mutable_droneinfo(int index) {
  // @@protoc_insertion_point(field_mutable:interfacevalues.MapInfo.droneinfo)
  return droneinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::interfacevalues::DroneInfo >*
MapInfo::mutable_droneinfo() {
  // @@protoc_insertion_point(field_mutable_list:interfacevalues.MapInfo.droneinfo)
  return &droneinfo_;
}
inline const ::interfacevalues::DroneInfo& MapInfo::_internal_droneinfo(int index) const {
  return droneinfo_.Get(index);
}
inline const ::interfacevalues::DroneInfo& MapInfo::droneinfo(int index) const {
  // @@protoc_insertion_point(field_get:interfacevalues.MapInfo.droneinfo)
  return _internal_droneinfo(index);
}
inline ::interfacevalues::DroneInfo* MapInfo::_internal_add_droneinfo() {
  return droneinfo_.Add();
}
inline ::interfacevalues::DroneInfo* MapInfo::add_droneinfo() {
  ::interfacevalues::DroneInfo* _add = _internal_add_droneinfo();
  // @@protoc_insertion_point(field_add:interfacevalues.MapInfo.droneinfo)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::interfacevalues::DroneInfo >&
MapInfo::droneinfo() const {
  // @@protoc_insertion_point(field_list:interfacevalues.MapInfo.droneinfo)
  return droneinfo_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace interfacevalues

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_interface_2dvalues_2eproto
