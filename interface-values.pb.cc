// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: interface-values.proto

#include "interface-values.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace interfacevalues {
constexpr DroneInfo_Location::DroneInfo_Location(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : xcoord_(0)
  , ycoord_(0){}
struct DroneInfo_LocationDefaultTypeInternal {
  constexpr DroneInfo_LocationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DroneInfo_LocationDefaultTypeInternal() {}
  union {
    DroneInfo_Location _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DroneInfo_LocationDefaultTypeInternal _DroneInfo_Location_default_instance_;
constexpr DroneInfo_SearchArea::DroneInfo_SearchArea(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : upperbound_(0)
  , leftbound_(0)
  , lowerbound_(0)
  , rightbound_(0){}
struct DroneInfo_SearchAreaDefaultTypeInternal {
  constexpr DroneInfo_SearchAreaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DroneInfo_SearchAreaDefaultTypeInternal() {}
  union {
    DroneInfo_SearchArea _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DroneInfo_SearchAreaDefaultTypeInternal _DroneInfo_SearchArea_default_instance_;
constexpr DroneInfo::DroneInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : location_()
  , searcharea_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DroneInfoDefaultTypeInternal {
  constexpr DroneInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DroneInfoDefaultTypeInternal() {}
  union {
    DroneInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DroneInfoDefaultTypeInternal _DroneInfo_default_instance_;
constexpr MapInfo::MapInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : droneinfo_(){}
struct MapInfoDefaultTypeInternal {
  constexpr MapInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MapInfoDefaultTypeInternal() {}
  union {
    MapInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MapInfoDefaultTypeInternal _MapInfo_default_instance_;
}  // namespace interfacevalues
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_interface_2dvalues_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_interface_2dvalues_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_interface_2dvalues_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_interface_2dvalues_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::interfacevalues::DroneInfo_Location, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfacevalues::DroneInfo_Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfacevalues::DroneInfo_Location, xcoord_),
  PROTOBUF_FIELD_OFFSET(::interfacevalues::DroneInfo_Location, ycoord_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::interfacevalues::DroneInfo_SearchArea, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfacevalues::DroneInfo_SearchArea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfacevalues::DroneInfo_SearchArea, upperbound_),
  PROTOBUF_FIELD_OFFSET(::interfacevalues::DroneInfo_SearchArea, leftbound_),
  PROTOBUF_FIELD_OFFSET(::interfacevalues::DroneInfo_SearchArea, lowerbound_),
  PROTOBUF_FIELD_OFFSET(::interfacevalues::DroneInfo_SearchArea, rightbound_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::interfacevalues::DroneInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::interfacevalues::DroneInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfacevalues::DroneInfo, name_),
  PROTOBUF_FIELD_OFFSET(::interfacevalues::DroneInfo, location_),
  PROTOBUF_FIELD_OFFSET(::interfacevalues::DroneInfo, searcharea_),
  0,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::interfacevalues::MapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfacevalues::MapInfo, droneinfo_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::interfacevalues::DroneInfo_Location)},
  { 9, 18, sizeof(::interfacevalues::DroneInfo_SearchArea)},
  { 22, 30, sizeof(::interfacevalues::DroneInfo)},
  { 33, -1, sizeof(::interfacevalues::MapInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfacevalues::_DroneInfo_Location_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfacevalues::_DroneInfo_SearchArea_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfacevalues::_DroneInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfacevalues::_MapInfo_default_instance_),
};

const char descriptor_table_protodef_interface_2dvalues_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026interface-values.proto\022\017interfacevalue"
  "s\"\224\002\n\tDroneInfo\022\014\n\004name\030\001 \001(\t\0225\n\010locatio"
  "n\030\002 \003(\0132#.interfacevalues.DroneInfo.Loca"
  "tion\0229\n\nsearcharea\030\003 \003(\0132%.interfacevalu"
  "es.DroneInfo.SearchArea\032*\n\010Location\022\016\n\006x"
  "coord\030\001 \001(\005\022\016\n\006ycoord\030\002 \001(\005\032[\n\nSearchAre"
  "a\022\022\n\nupperbound\030\001 \001(\005\022\021\n\tleftbound\030\002 \001(\005"
  "\022\022\n\nlowerbound\030\003 \001(\005\022\022\n\nrightbound\030\004 \001(\005"
  "\"8\n\007MapInfo\022-\n\tdroneinfo\030\001 \003(\0132\032.interfa"
  "cevalues.DroneInfo"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_interface_2dvalues_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_interface_2dvalues_2eproto = {
  false, false, 378, descriptor_table_protodef_interface_2dvalues_2eproto, "interface-values.proto", 
  &descriptor_table_interface_2dvalues_2eproto_once, nullptr, 0, 4,
  schemas, file_default_instances, TableStruct_interface_2dvalues_2eproto::offsets,
  file_level_metadata_interface_2dvalues_2eproto, file_level_enum_descriptors_interface_2dvalues_2eproto, file_level_service_descriptors_interface_2dvalues_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_interface_2dvalues_2eproto_getter() {
  return &descriptor_table_interface_2dvalues_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_interface_2dvalues_2eproto(&descriptor_table_interface_2dvalues_2eproto);
namespace interfacevalues {

// ===================================================================

class DroneInfo_Location::_Internal {
 public:
  using HasBits = decltype(std::declval<DroneInfo_Location>()._has_bits_);
  static void set_has_xcoord(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ycoord(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DroneInfo_Location::DroneInfo_Location(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:interfacevalues.DroneInfo.Location)
}
DroneInfo_Location::DroneInfo_Location(const DroneInfo_Location& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&xcoord_, &from.xcoord_,
    static_cast<size_t>(reinterpret_cast<char*>(&ycoord_) -
    reinterpret_cast<char*>(&xcoord_)) + sizeof(ycoord_));
  // @@protoc_insertion_point(copy_constructor:interfacevalues.DroneInfo.Location)
}

inline void DroneInfo_Location::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&xcoord_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ycoord_) -
    reinterpret_cast<char*>(&xcoord_)) + sizeof(ycoord_));
}

DroneInfo_Location::~DroneInfo_Location() {
  // @@protoc_insertion_point(destructor:interfacevalues.DroneInfo.Location)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DroneInfo_Location::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DroneInfo_Location::ArenaDtor(void* object) {
  DroneInfo_Location* _this = reinterpret_cast< DroneInfo_Location* >(object);
  (void)_this;
}
void DroneInfo_Location::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DroneInfo_Location::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DroneInfo_Location::Clear() {
// @@protoc_insertion_point(message_clear_start:interfacevalues.DroneInfo.Location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&xcoord_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ycoord_) -
        reinterpret_cast<char*>(&xcoord_)) + sizeof(ycoord_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DroneInfo_Location::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 xcoord = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_xcoord(&has_bits);
          xcoord_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ycoord = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ycoord(&has_bits);
          ycoord_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DroneInfo_Location::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfacevalues.DroneInfo.Location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 xcoord = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_xcoord(), target);
  }

  // optional int32 ycoord = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ycoord(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfacevalues.DroneInfo.Location)
  return target;
}

size_t DroneInfo_Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfacevalues.DroneInfo.Location)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 xcoord = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_xcoord());
    }

    // optional int32 ycoord = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ycoord());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DroneInfo_Location::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DroneInfo_Location::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DroneInfo_Location::GetClassData() const { return &_class_data_; }

void DroneInfo_Location::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DroneInfo_Location *>(to)->MergeFrom(
      static_cast<const DroneInfo_Location &>(from));
}


void DroneInfo_Location::MergeFrom(const DroneInfo_Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfacevalues.DroneInfo.Location)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      xcoord_ = from.xcoord_;
    }
    if (cached_has_bits & 0x00000002u) {
      ycoord_ = from.ycoord_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DroneInfo_Location::CopyFrom(const DroneInfo_Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfacevalues.DroneInfo.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DroneInfo_Location::IsInitialized() const {
  return true;
}

void DroneInfo_Location::InternalSwap(DroneInfo_Location* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DroneInfo_Location, ycoord_)
      + sizeof(DroneInfo_Location::ycoord_)
      - PROTOBUF_FIELD_OFFSET(DroneInfo_Location, xcoord_)>(
          reinterpret_cast<char*>(&xcoord_),
          reinterpret_cast<char*>(&other->xcoord_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DroneInfo_Location::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_interface_2dvalues_2eproto_getter, &descriptor_table_interface_2dvalues_2eproto_once,
      file_level_metadata_interface_2dvalues_2eproto[0]);
}

// ===================================================================

class DroneInfo_SearchArea::_Internal {
 public:
  using HasBits = decltype(std::declval<DroneInfo_SearchArea>()._has_bits_);
  static void set_has_upperbound(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_leftbound(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lowerbound(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rightbound(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

DroneInfo_SearchArea::DroneInfo_SearchArea(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:interfacevalues.DroneInfo.SearchArea)
}
DroneInfo_SearchArea::DroneInfo_SearchArea(const DroneInfo_SearchArea& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&upperbound_, &from.upperbound_,
    static_cast<size_t>(reinterpret_cast<char*>(&rightbound_) -
    reinterpret_cast<char*>(&upperbound_)) + sizeof(rightbound_));
  // @@protoc_insertion_point(copy_constructor:interfacevalues.DroneInfo.SearchArea)
}

inline void DroneInfo_SearchArea::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&upperbound_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rightbound_) -
    reinterpret_cast<char*>(&upperbound_)) + sizeof(rightbound_));
}

DroneInfo_SearchArea::~DroneInfo_SearchArea() {
  // @@protoc_insertion_point(destructor:interfacevalues.DroneInfo.SearchArea)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DroneInfo_SearchArea::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DroneInfo_SearchArea::ArenaDtor(void* object) {
  DroneInfo_SearchArea* _this = reinterpret_cast< DroneInfo_SearchArea* >(object);
  (void)_this;
}
void DroneInfo_SearchArea::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DroneInfo_SearchArea::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DroneInfo_SearchArea::Clear() {
// @@protoc_insertion_point(message_clear_start:interfacevalues.DroneInfo.SearchArea)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&upperbound_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rightbound_) -
        reinterpret_cast<char*>(&upperbound_)) + sizeof(rightbound_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DroneInfo_SearchArea::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 upperbound = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_upperbound(&has_bits);
          upperbound_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 leftbound = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_leftbound(&has_bits);
          leftbound_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 lowerbound = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_lowerbound(&has_bits);
          lowerbound_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 rightbound = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_rightbound(&has_bits);
          rightbound_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DroneInfo_SearchArea::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfacevalues.DroneInfo.SearchArea)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 upperbound = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_upperbound(), target);
  }

  // optional int32 leftbound = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_leftbound(), target);
  }

  // optional int32 lowerbound = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_lowerbound(), target);
  }

  // optional int32 rightbound = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_rightbound(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfacevalues.DroneInfo.SearchArea)
  return target;
}

size_t DroneInfo_SearchArea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfacevalues.DroneInfo.SearchArea)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 upperbound = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_upperbound());
    }

    // optional int32 leftbound = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_leftbound());
    }

    // optional int32 lowerbound = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_lowerbound());
    }

    // optional int32 rightbound = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_rightbound());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DroneInfo_SearchArea::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DroneInfo_SearchArea::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DroneInfo_SearchArea::GetClassData() const { return &_class_data_; }

void DroneInfo_SearchArea::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DroneInfo_SearchArea *>(to)->MergeFrom(
      static_cast<const DroneInfo_SearchArea &>(from));
}


void DroneInfo_SearchArea::MergeFrom(const DroneInfo_SearchArea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfacevalues.DroneInfo.SearchArea)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      upperbound_ = from.upperbound_;
    }
    if (cached_has_bits & 0x00000002u) {
      leftbound_ = from.leftbound_;
    }
    if (cached_has_bits & 0x00000004u) {
      lowerbound_ = from.lowerbound_;
    }
    if (cached_has_bits & 0x00000008u) {
      rightbound_ = from.rightbound_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DroneInfo_SearchArea::CopyFrom(const DroneInfo_SearchArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfacevalues.DroneInfo.SearchArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DroneInfo_SearchArea::IsInitialized() const {
  return true;
}

void DroneInfo_SearchArea::InternalSwap(DroneInfo_SearchArea* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DroneInfo_SearchArea, rightbound_)
      + sizeof(DroneInfo_SearchArea::rightbound_)
      - PROTOBUF_FIELD_OFFSET(DroneInfo_SearchArea, upperbound_)>(
          reinterpret_cast<char*>(&upperbound_),
          reinterpret_cast<char*>(&other->upperbound_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DroneInfo_SearchArea::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_interface_2dvalues_2eproto_getter, &descriptor_table_interface_2dvalues_2eproto_once,
      file_level_metadata_interface_2dvalues_2eproto[1]);
}

// ===================================================================

class DroneInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<DroneInfo>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DroneInfo::DroneInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  location_(arena),
  searcharea_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:interfacevalues.DroneInfo)
}
DroneInfo::DroneInfo(const DroneInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      location_(from.location_),
      searcharea_(from.searcharea_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:interfacevalues.DroneInfo)
}

inline void DroneInfo::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DroneInfo::~DroneInfo() {
  // @@protoc_insertion_point(destructor:interfacevalues.DroneInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DroneInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DroneInfo::ArenaDtor(void* object) {
  DroneInfo* _this = reinterpret_cast< DroneInfo* >(object);
  (void)_this;
}
void DroneInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DroneInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DroneInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:interfacevalues.DroneInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  location_.Clear();
  searcharea_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DroneInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfacevalues.DroneInfo.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .interfacevalues.DroneInfo.Location location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_location(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .interfacevalues.DroneInfo.SearchArea searcharea = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_searcharea(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DroneInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfacevalues.DroneInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "interfacevalues.DroneInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .interfacevalues.DroneInfo.Location location = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_location_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_location(i), target, stream);
  }

  // repeated .interfacevalues.DroneInfo.SearchArea searcharea = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_searcharea_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_searcharea(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfacevalues.DroneInfo)
  return target;
}

size_t DroneInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfacevalues.DroneInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .interfacevalues.DroneInfo.Location location = 2;
  total_size += 1UL * this->_internal_location_size();
  for (const auto& msg : this->location_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .interfacevalues.DroneInfo.SearchArea searcharea = 3;
  total_size += 1UL * this->_internal_searcharea_size();
  for (const auto& msg : this->searcharea_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DroneInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DroneInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DroneInfo::GetClassData() const { return &_class_data_; }

void DroneInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DroneInfo *>(to)->MergeFrom(
      static_cast<const DroneInfo &>(from));
}


void DroneInfo::MergeFrom(const DroneInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfacevalues.DroneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  location_.MergeFrom(from.location_);
  searcharea_.MergeFrom(from.searcharea_);
  if (from._internal_has_name()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DroneInfo::CopyFrom(const DroneInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfacevalues.DroneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DroneInfo::IsInitialized() const {
  return true;
}

void DroneInfo::InternalSwap(DroneInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  location_.InternalSwap(&other->location_);
  searcharea_.InternalSwap(&other->searcharea_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DroneInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_interface_2dvalues_2eproto_getter, &descriptor_table_interface_2dvalues_2eproto_once,
      file_level_metadata_interface_2dvalues_2eproto[2]);
}

// ===================================================================

class MapInfo::_Internal {
 public:
};

MapInfo::MapInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  droneinfo_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:interfacevalues.MapInfo)
}
MapInfo::MapInfo(const MapInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      droneinfo_(from.droneinfo_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:interfacevalues.MapInfo)
}

inline void MapInfo::SharedCtor() {
}

MapInfo::~MapInfo() {
  // @@protoc_insertion_point(destructor:interfacevalues.MapInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MapInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MapInfo::ArenaDtor(void* object) {
  MapInfo* _this = reinterpret_cast< MapInfo* >(object);
  (void)_this;
}
void MapInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MapInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:interfacevalues.MapInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  droneinfo_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .interfacevalues.DroneInfo droneinfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_droneinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MapInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfacevalues.MapInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .interfacevalues.DroneInfo droneinfo = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_droneinfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_droneinfo(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfacevalues.MapInfo)
  return target;
}

size_t MapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfacevalues.MapInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .interfacevalues.DroneInfo droneinfo = 1;
  total_size += 1UL * this->_internal_droneinfo_size();
  for (const auto& msg : this->droneinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MapInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MapInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MapInfo::GetClassData() const { return &_class_data_; }

void MapInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MapInfo *>(to)->MergeFrom(
      static_cast<const MapInfo &>(from));
}


void MapInfo::MergeFrom(const MapInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfacevalues.MapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  droneinfo_.MergeFrom(from.droneinfo_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MapInfo::CopyFrom(const MapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfacevalues.MapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapInfo::IsInitialized() const {
  return true;
}

void MapInfo::InternalSwap(MapInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  droneinfo_.InternalSwap(&other->droneinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_interface_2dvalues_2eproto_getter, &descriptor_table_interface_2dvalues_2eproto_once,
      file_level_metadata_interface_2dvalues_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace interfacevalues
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::interfacevalues::DroneInfo_Location* Arena::CreateMaybeMessage< ::interfacevalues::DroneInfo_Location >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfacevalues::DroneInfo_Location >(arena);
}
template<> PROTOBUF_NOINLINE ::interfacevalues::DroneInfo_SearchArea* Arena::CreateMaybeMessage< ::interfacevalues::DroneInfo_SearchArea >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfacevalues::DroneInfo_SearchArea >(arena);
}
template<> PROTOBUF_NOINLINE ::interfacevalues::DroneInfo* Arena::CreateMaybeMessage< ::interfacevalues::DroneInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfacevalues::DroneInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::interfacevalues::MapInfo* Arena::CreateMaybeMessage< ::interfacevalues::MapInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfacevalues::MapInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
